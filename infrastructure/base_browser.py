from abc import ABC, abstractmethod
from typing import Any, Protocol


class BrowserClient(Protocol):
    """
    A protocol for browser clients.
    """
    async def goto(self, url: str) -> None: ...
    async def fill(self, selector) -> None: ...
    async def click(self) -> None: ...
    async def wait_for_selector(self, selector: str) -> None: ...
    async def query_selector_all(self, selector: str) -> list[Any]: ...
    async def query_selector(self, selector: str) -> None: ...
    async def inner_text(self, selector: str) -> str: ...
    @property
    def url(self) -> str: ...


class Logger(Protocol):
    def info(self, message: str) -> None: ...
    def error(self, message: str) -> None: ...


class BrowserLauncher(ABC):
    """
    An abstract base class for browser launchers.
    """
    @abstractmethod
    async def launch(self) -> BrowserClient: ...
    
    @abstractmethod
    async def close(self) -> None: ...